" UI
set guifont=Source_Code_Pro:h18
set lines=40 columns=110
set guioptions-=L
set guioptions-=r

" Solarized
if !has("gui_running")
  let g:solarized_bold=0
  let g:solarized_underline=0
  let g:solarized_termtrans=0
  let g:solarized_termcolors=16
  let g:solarized_constrast="normal"
  let g:solarized_visibility="normal"
  let g:solarized_diff_mode="normal"
  color solarized
  highlight clear SignColumn      " SignColumn should match background
  highlight clear LineNr          " Current line number row will have same background color in relative mode
endif

set shiftwidth=2                " Use indents of 4 spaces
set tabstop=2                   " An indentation every four columns
set softtabstop=2               " Let backspace delete indent
set expandtab                   " Tabs are spaces, not tabs
set cino=N-1s,g-1s              " CPP indenting

" Spell check
autocmd! FileType * set nospell

" Input Method
set noimdisable
autocmd! InsertLeave * set imdisable|set iminsert=0
autocmd! InsertEnter * set noimdisable|set iminsert=0

" Error bell
set noeb
set vb t_vb=

" Mappings
imap <Esc> <Esc><Esc>

" Plugin
let g:indent_guides_enable_on_vim_startup=0
set nolist

" Nerdtree
let NERDTreeQuitOnOpen=0
let NERDTreeIgnore=[ '\.DS_Store', '\.pyc$' ]
nnoremap <leader><C-j> :NERDTreeFind<CR>

" CtrlP
unlet g:ctrlp_custom_ignore
unlet g:ctrlp_user_command
nmap <Leader>gn :let g:ctrlp_default_input = expand('%:t:r') \|
    \ call ctrlp#init(0) \| unlet g:ctrlp_default_input<CR><CR>
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\.git$\|\.hg$\|\.svn$\|CMakeFiles$',
      \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$\|\.DS_Store\|CMakeCache\.txt$\|\.cmake$' }

" YouCompleteMe
let g:ycm_confirm_extra_conf = 0
nnoremap gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gt :YcmCompleter GetType<CR>

" remap Ultisnips for compatibility for YCM
let g:UltiSnipsExpandTrigger = '<C-k>'
let g:UltiSnipsJumpForwardTrigger = '<C-k>'
let g:UltiSnipsJumpBackwardTrigger = '<C-j>'
let g:UltiSnipsExpandTrigger = "<nop>"

let g:ulti_expand_or_jump_res = 0
function ExpandSnippetOrCarriageReturn()
  let snippet = UltiSnips#ExpandSnippetOrJump()
  if g:ulti_expand_or_jump_res > 0
    return snippet
  else
    return "\<CR>"
  endif
endfunction
inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"

" tagbar
let g:tagbar_ctags_bin='/usr/local/bin/ctags'
